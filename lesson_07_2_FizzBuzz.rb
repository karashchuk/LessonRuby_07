# 2. FizzBuzz
# •	Капитан, нам только что сообщили! Специалисты из отряда шифрования смогли вычислить условия запуска гиперпространственных ворот.
# •	Хм... Тогда почему в вашем голосе я слышу ноты досады, лейтенант?
# •	Всё дело в том что мы смогли узнать лишь условия. Необходим алгоритм, который позволит сформировать
# правильную последовательность символов.
# •	Что ж, тогда я думаю нам лучше не терять времени. Что за условия?
# •	Там целые числа от 1 до 100. Нужно вывести их таким образом, что если число делится нацело на 3,
# вместо него выводить 'Fizz'. Если делится нацело на 5 - выводить 'Buzz'.
# Если соблюдаются оба этих условия, выводить 'FizzBuzz', а если ни одного условия не соблюдается - выводить само число.
# •	Каким же странным сознанием была наделена эта цивилизация?
# •	Не знаю, Капитан, но в том что мы смогли расшифровать сказано,
# что для представления условий необходимо использовать каррирование.
# •	Что-нибудь известно о том какой язык возможно использовать? Может быть, Java или Python?
# •	Никак нет, Капитан. На одной из створок ворот мы обнаружили гравировку с несколькими строками кода Ruby.
# •	Всё ясно. Похоже нам крупно повезло: лучшие профессионалы как раз сейчас изучают Ruby.
# Они большие молодцы, и хотя не все темы ещё пройдены, я уверен что они с этим справятся!
def FizzBuzz n
  if n % 3 == 0
    if n % 5 == 0
      'FizzBuzz'
    else
      'Fizz'
    end
  elsif n % 5 == 0
    'Buzz'
  else
    n
  end
end

ary = Proc.new do |a,b|
  a+b
end
aa = ary.curry.call(2)
p aa.call(5)
p aa.call(8)
p FizzBuzz(10).to_s
p FizzBuzz 12
p FizzBuzz 15
p FizzBuzz(22).to_s

add = proc { |x, y| x + y }
add_one = add.curry.call(1) # => #<Proc:0x00...>
p add_one.call(3) # => 4
p add_one.call(9) # => 10
